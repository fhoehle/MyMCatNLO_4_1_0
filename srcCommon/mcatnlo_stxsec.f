      subroutine freal(s,x,yi,xij,yj,tk,uk,q1q,q2q,xinv,jproc,xmatout)
c Returns the real matrix elements squared, times the flux factor,
c times the FKS damping factors: 
c   xii**2*(1-yi**2)=4*tk*uk/s**2    when    yj=2   (initial-state kinematics)
c   xii**2*(1-yj)                    when    yi=2   (final-state kinematics)
c Initial- and final-state kinematics are generated by invar_in and
c invar_out respectively.
c
c The matrix elements are passed through the following arrays
c xmat(out/in) (i,j):
c j = 1: s-channel, 2: t-channel
c jproc=2 --> q(bar)q(bar) processes
c jproc=3 --> gq(bar),q(bar)g processes
c The meaning of i(==idr) depends on jproc -- see note
c The value jproc=1 is conventially reserved to gg processes in MC@NLO
c
      implicit none
      real * 8 s,x,yi,xij,yj,tk,uk,q1q,q2q,xinv(5),xmatout(8,2)
      integer jproc
      include 'stpcblks.h'
      real * 8 xii,xmatin(8,2)
      integer i,j,idrmax(2:3,2)
      common/cidrmax/idrmax
c
      xii=1-x
      if(jproc.eq.2)then
        call freal_qq(s,xii,yi,xij,yj,tk,uk,q1q,q2q,xinv,xmatin)
        do j=1,2
          do i=1,idrmax(jproc,j)
            xmatout(i,j)=xmatin(i,j)
          enddo
        enddo
      elseif(jproc.eq.3)then
        call freal_qg(s,xii,yi,xij,yj,tk,uk,q1q,q2q,xinv,xmatin)
        do j=1,2
          do i=1,idrmax(jproc,j)
            xmatout(i,j)=xmatin(i,j)
          enddo
        enddo
      else
        write(*,*)'Unknown process in freal',jproc
        stop
      endif
c
      return
      end


      subroutine freal_qq(xs,xxii,xyi,xxij,xyj,xtk,xuk,xq1q,xq2q,
     #                    xxinv,xmatout)
c Real matrix elements for qq(bar) --> tqg. See freal for comments
      implicit none
      include 'stpcblks.h'
      real * 8 xs,xxii,xyi,xxij,xyj,xtk,xuk,xq1q,xq2q,xxinv(5),
     #  xmatout(8,2)
      real * 8 s,xii,yi,xij,yj,tk,uk,q1q,q2q,q1c,q2c,tiny,pi,vcf,
     #  s_red,t_red,x_ap,ap_kern,softfc(8,2),xfact,xinv(5),xmatin(8,2)
      integer i,j,itwo,icode,idrmax(2:3,2)
      common/cidrmax/idrmax
      integer idrlimcp(2,2:3,8),idrlimcm(2,2:3,8)
      common/cidrlims/idrlimcp,idrlimcm
      parameter (tiny=1.d-6)
      parameter (pi=3.14159265358979312D0)
      parameter (vcf=4.d0/3.d0)
      parameter (itwo=2)
c
      s=xs
      xii=xxii
      yi=xyi
      xij=xxij
      yj=xyj
      tk=xtk
      uk=xuk
      q1q=xq1q
      q2q=xq2q
      q1c = xm12 + xm22 - s - tk - q1q
      q2c = xm12 + xm22 - s - uk - q2q
      do i=1,5
         xinv(i)=xxinv(i)
      enddo
      do j=1,2
        do i=1,idrmax(2,j)
          softfc(i,j)=0d0
        enddo
      enddo
      if(xii.lt.tiny)then
c Soft limit
        s_red=s
        t_red=q1q
        if(yi.eq.2.d0)then
c This is relevant to OUT parametrization. The following assumes that 
c   p_i.k = sqrt{s}*(1-x)*xinv(i)    i=1,2
c   k_i.k = sqrt{s}*(1-x)*xinv(i+3)  i=1,2
c and that xinv(5)=sqrt(s)*xij*(1-yj)/4; softfc(i,j) here is the combination
c of the eikonals, times the damping factor (1-yj)*xii**2
c
          softfc(1,1) = vcf/s_red * 
     #      ( (1-yj)*s/(xinv(1)*xinv(2))+
     #        4*(s-xm12-xm22)/(sqrt(s)*xinv(4)*xij)-
     #        xm12*(1-yj)/(xinv(4)**2) )
          softfc(3,1) = softfc(1,1)
c
          softfc(1,2) = vcf/s_red * 
     #      ( -4*q2q/(xinv(2)*sqrt(s)*xij) +
     #        (1-yj)*(q1q-xm12)/(-xinv(1)*xinv(4)) -
     #        xm12*(1-yj)/(xinv(4)**2) )
          softfc(2,2) = softfc(1,2)
          softfc(3,2) = vcf/s_red * 
     #      ( -4*q1c/(xinv(1)*sqrt(s)*xij) +
     #        (1-yj)*(q2c-xm12)/(-xinv(2)*xinv(4)) -
     #        xm12*(1-yj)/(xinv(4)**2) )
          softfc(4,2) = softfc(3,2)
        elseif(yj.eq.2.d0)then
c This is relevant to IN parametrization. The following assumes that 
c   p_i.k = sqrt{s}*(1-x)*xinv(i)    i=1,2
c   k_i.k = sqrt{s}*(1-x)*xinv(i+3)  i=1,2
c and that xinv(1)=sqrt(s)*(1-yi)/4, xinv(2)=sqrt(s)*(1+yi)/4; 
c softfc here is the combination of the eikonals, times the damping 
c factor (1-yi**2)*xii**2
c
          softfc(1,1) = 16*vcf/s_red * 
     #      ( 1+(1-yi**2)/16d0*(s-xm12-xm22)/(xinv(4)*xinv(5)) 
     #       -xm12*(1-yi**2)/(16*xinv(4)**2) )
          softfc(3,1) = softfc(1,1)
c
          softfc(1,2) = vcf/s_red * 
     #      ( -q2q*(1-yi)/((sqrt(s_red)/4)*xinv(5))
     #       -(q1q-xm12)*(1+yi)/((sqrt(s_red)/4)*xinv(4)) 
     #       -xm12*(1-yi**2)/(xinv(4)**2) )
          softfc(2,2) = softfc(1,2)
          softfc(3,2) = vcf/s_red *
     #      ( -q1c*(1+yi)/((sqrt(s_red)/4)*xinv(5))
     #       -(q2c-xm12)*(1-yi)/((sqrt(s_red)/4)*xinv(4)) 
     #       -xm12*(1-yi**2)/(xinv(4)**2) )
          softfc(4,2) = softfc(3,2)
        else
          write(6,*)'freal_qq called in the wrong way',yi,yj
          stop
        endif
        call fborn(s_red,t_red,itwo,xmatin)
        do j=1,2
          do i=1,idrmax(2,j)
             xmatout(i,j)=softfc(i,j)*xmatin(i,j) 
          enddo
        enddo
      elseif(abs(1-yi).lt.tiny)then
c Collinear + limit
        icode=4
        x_ap=1-xii
        s_red=s*x_ap
        t_red=q2q
        call fborn(s_red,t_red,itwo,xmatin)
        do j=1,2
          do i=1,idrmax(2,j)
            if(idrlimcp(j,2,i).ne.0)
     #        xmatout(i,j)=4*(1+yi)/s*ap_kern(x_ap,abs(icode))*
     #                     xmatin(idrlimcp(j,2,i),j)
           enddo
        enddo
      elseif(abs(1+yi).lt.tiny)then
c Collinear - limit
        icode=4
        x_ap=1-xii
        s_red=s*x_ap
        t_red=q1q
        call fborn(s_red,t_red,itwo,xmatin)
        do j=1,2
          do i=1,idrmax(2,j)
            if(idrlimcm(j,2,i).ne.0)
     #        xmatout(i,j)=4*(1-yi)/s*ap_kern(x_ap,abs(icode))*
     #                     xmatin(idrlimcm(j,2,i),j)
           enddo
        enddo
      elseif(abs(1-yj).lt.tiny)then
c Collinear out limit
        icode=4
        x_ap=xij/(xii+xij)
        s_red=s
        t_red=q1q
        call fborn(s_red,t_red,itwo,xmatin)
        do j=1,2
          do i=1,idrmax(2,j)
            xmatout(i,j)=4/(x_ap*s)*ap_kern(x_ap,abs(icode))*
     #                   xmatin(i,j)
           enddo
        enddo
      else
c The kinematical configuration is not in one of the singular regions:
c use the full expression for the matrix element
        if(yi.eq.2.d0)then
c Factor multiplying the matrix element, eq.(4.65)
c The factor xij is inserted in the main program
          xfact=(1-yj)*xii**2
        elseif(yj.eq.2.d0)then
c Factor multiplying the matrix element, eq.(4.37)
          xfact=(1-yi**2)*xii**2
        else
          write(6,*)'freal_qq called in the wrong way',yi,yj
          stop
        endif
c Get the dot products to calculate the relevant matrix element
        call stmatr_qq(s,tk,uk,q1q,q2q,xmatin)
        do j=1,2
          do i=1,idrmax(2,j)
            xmatout(i,j)=xfact*xmatin(i,j)/(2*s)
          enddo
        enddo
      endif
c
      return
      end


      subroutine freal_qg(xs,xxii,xyi,xxij,xyj,xtk,xuk,xq1q,xq2q,
     #                    xxinv,xmatout)
c Real matrix elements for qg --> t qp q. See freal for comments
      implicit none
      include 'stpcblks.h'
      real * 8 xs,xxii,xyi,xxij,xyj,xtk,xuk,xq1q,xq2q,xxinv(5),
     #  xmatout(8,2)
      real * 8 s,xii,yi,xij,yj,tk,uk,q1q,q2q,tiny,pi,vcf,s_red,t_red,
     #  x_ap,ap_kern,xfact,xinv(5),xmatin(8,2)
      integer i,j,itwo,icode,idrmax(2:3,2)
      common/cidrmax/idrmax
      integer idrlimcp(2,2:3,8),idrlimcm(2,2:3,8)
      common/cidrlims/idrlimcp,idrlimcm
      parameter (tiny=1.d-6)
      parameter (pi=3.14159265358979312D0)
      parameter (vcf=4.d0/3.d0)
      parameter (itwo=2)
c
      s=xs
      xii=xxii
      yi=xyi
      xij=xxij
      yj=xyj
      tk=xtk
      uk=xuk
      q1q=xq1q
      q2q=xq2q
      do i=1,5
         xinv(i)=xxinv(i)
      enddo
      do j=1,2
        do i=1,idrmax(3,j)
          xmatout(i,j)=0.d0
        enddo
      enddo
      if(xii.lt.tiny)then
c Soft limit
        continue
      elseif(abs(1-yi).lt.tiny)then
c Collinear + limit. For processes with initial gluons, only the gluon 
c can split; if the quark would split, one would have a born cross section
c with an initial gluon; an impossibility here
        icode=2
        x_ap=1-xii
        s_red=s*x_ap
        t_red=q2q
        call fborn(s_red,t_red,itwo,xmatin)
        do j=1,2
          do i=1,idrmax(3,j)
            if(idrlimcp(j,3,i).ne.0)
     #        xmatout(i,j)=4*(1+yi)/s*ap_kern(x_ap,abs(icode))*
     #                     xmatin(idrlimcp(j,3,i),j)
           enddo
        enddo
      elseif(abs(1+yi).lt.tiny)then
c Collinear - limit
        icode=2
        x_ap=1-xii
        s_red=s*x_ap
        t_red=q1q
        call fborn(s_red,t_red,itwo,xmatin)
        do j=1,2
          do i=1,idrmax(3,j)
            if(idrlimcm(j,3,i).ne.0)
     #        xmatout(i,j)=4*(1-yi)/s*ap_kern(x_ap,abs(icode))*
     #                     xmatin(idrlimcm(j,3,i),j)
           enddo
        enddo
      elseif(abs(1-yj).lt.tiny)then
c Collinear out limit
        continue
      else
c The kinematical configuration is not in one of the singular regions:
c use the full expression for the matrix element
        if(yi.eq.2.d0)then
c Factor multiplying the matrix element, eq.(4.65)
c The factor xij is inserted in the main program
          xfact=(1-yj)*xii**2
        elseif(yj.eq.2.d0)then
c Factor multiplying the matrix element, eq.(4.37)
          xfact=(1-yi**2)*xii**2
        else
          write(6,*)'freal_qg called in the wrong way',yi,yj
          stop
        endif
c Get the dot products to calculate the relevant matrix element
        call stmatr_qg(s,tk,uk,q1q,q2q,xmatin)
        do j=1,2
          do i=1,idrmax(3,j)
            xmatout(i,j)=xfact*xmatin(i,j)/(2*s)
          enddo
        enddo
      endif
      return
      end


      subroutine f2sv(xs,xt,jproc,xmatout)
c Returns sig_2pv of FKS. The normalization is such that
c  dsigma^{(sv)} = g_W^4 as/(2*pi) |V_ij|^2 |V_tk|^2 f2sv dphi_2
      implicit none
      real * 8 xs,xt,u,xmatout(1:8,1:2)
      include 'stpcblks.h'
      real * 8 tiny,pi,zeta2,s,t,vcf,xicut,deltai,deltao,svsbfac2,
     # svsnonfac,svtbfac2,svtnonfac,xmatsb,xmatin(8,2),xmattb(1:4),
     # xmatsnonfac(1:4),xmattnonfac(1:4)
      integer i,j,jproc,itwo,idrmax(2:3,2)
      common/cidrmax/idrmax
      common/parsub/xicut,deltai,deltao
      parameter (tiny=1.d-8)
      parameter (pi=3.14159265358979312D0)
      parameter (zeta2=3.14159265358979312D0**2/6d0)
      parameter (vcf=4.d0/3.d0)
      parameter (itwo=2)
c
      if(jproc.eq.2)then
        s=xs
        t=xt
        u=xm12+xm22-s-t
        if(abs(xmuf2h1-xmuf2h2).gt.tiny .or.
     #     abs(xmuf2h1-xmur2).gt.tiny)then
          write(*,*)'Error in f2sv: no such scale choice'
          stop
        endif
        call fborn(s,t,itwo,xmatin)
c s-channel: one term is proportional to the Born (svsbfac2), one
c term has another dependence on s and t (svsnonfac)
        xmatsb = svsbfac2(s)
        xmatsnonfac(1) = svsnonfac(s,t,u)
        xmatsnonfac(2) = 0.
        xmatsnonfac(3) = svsnonfac(s,u,t)
        xmatsnonfac(4) = 0.
        do i=1,idrmax(jproc,1)
          xmatout(i,1)=vcf*( xmatsb*xmatin(i,1)
     #                      +xmatsnonfac(i)/(2.*s) )
        enddo
c t-channel: one term is proportional to the Born (svtbfac2), one
c term has another dependence on s and t (svtnonfac)
        xmattb(1) = svtbfac2(s,t)
        xmattb(2) = svtbfac2(s,t)
        xmattb(3) = svtbfac2(s,u)
        xmattb(4) = svtbfac2(s,u)
        xmattnonfac(1) = -svtnonfac(s,t,u)
        xmattnonfac(2) = -svtnonfac(u,t,s)
        xmattnonfac(3) = -svtnonfac(s,u,t)
        xmattnonfac(4) = -svtnonfac(t,u,s)
        do i=1,idrmax(jproc,2)
          xmatout(i,2)=vcf*( xmattb(i)*xmatin(i,2) 
     #                      +xmattnonfac(i)/(2.*s) )
        enddo
      else
        do j=1,2
          do i=1,idrmax(jproc,j)
            xmatout(i,j)=0.
          enddo
        enddo
      endif
c
      return
      end


      function svsbfac2(s)
c The proportional to Born in the FKS finite part, s-channel
      implicit none
      include 'stpcblks.h'
      real*8 svsbfac2,s
      real*8 xicut,deltai,deltao
      common/parsub/xicut,deltai,deltao
      real*8 m2,mu2,xlnxic,xlndoo2,xlnmu2om2,xlnm2os,xlnsomu2,
     #  xln1mm2os,xlnsom2m1,tmp1,tmp2,tmp3,pi,pi2,ddilog
      parameter (pi=3.14159265358979312D0)
      parameter (pi2=pi**2)
c
      m2=xm12
      mu2=xmuf2h1
      xlnxic=log(xicut)
      xlndoo2=log(deltao/2.d0)
      xlnmu2om2=log(mu2/m2)
      xlnm2os=log(m2/s)
      xlnsomu2=log(s/mu2)
      xln1mm2os=log(1-m2/s)
      xlnsom2m1=log(s/m2-1)
c
      tmp1=(-1-xlndoo2+xlnmu2om2+3*xlnsomu2)*xlnxic+2*xlnxic**2
      tmp2=(-3/4.d0+xln1mm2os)*xlndoo2
      tmp3=-15/4.d0+pi2/3.d0+ddilog(s/(s-m2))+ddilog(1-s/m2)-
     #   1/2.d0*xlnsom2m1**2+1/4.d0*xlnsom2m1*(6-2*m2/s+4*xlnmu2om2)+
     #   xln1mm2os**2-1/2.d0*xln1mm2os*(3+2*xlnmu2om2+2*xlnm2os)+
     #   xlnm2os**2+xlnm2os*((m2+3*s)/(4*(m2-s))+xlnmu2om2)-
     #   3/2.d0*xlnmu2om2
      svsbfac2=2*(tmp1+tmp2+tmp3)
      return
      end


      function svtbfac2(s,t)
c The proportional to Born in the FKS finite part, t-channel
      implicit none
      include 'stpcblks.h'
      real*8 svtbfac2,s,t
      real*8 xicut,deltai,deltao
      common/parsub/xicut,deltai,deltao
      real*8 m2,mu2,xlnxic,xlndoo2,xlnmu2om2,xlnm2os,xlnsomu2,
     #  xln1mm2os,xlnsom2m1,xlnmtom2,xlnm2mtom2s,xlnmtosmm2,
     #  xln1ptosmm2,xln1mtom2,tmp1,tmp2,tmp3,pi,pi2,ddilog
      parameter (pi=3.14159265358979312D0)
      parameter (pi2=pi**2)
c
      m2=xm12
      mu2=xmuf2h1
      xlnxic=log(xicut)
      xlndoo2=log(deltao/2.d0)
      xlnmu2om2=log(mu2/m2)
      xlnm2os=log(m2/s)
      xlnsomu2=log(s/mu2)
      xln1mm2os=log(1-m2/s)
      xlnsom2m1=log(s/m2-1)
      xlnmtom2=log(-t/m2)
      xlnm2mtom2s=log((m2-t)/sqrt(m2*s))
      xlnmtosmm2=log(-t/(s-m2))
      xln1ptosmm2=log(1+t/(s-m2))
      xln1mtom2=log(1-t/m2)
c
      tmp1=2*(2*xlnsomu2+2*xlnm2mtom2s+2*xlnmtosmm2-xlndoo2-1)*xlnxic+
     #     4*xlnxic**2
      tmp2=(2*xln1mm2os-3/2.d0)*xlndoo2
      tmp3=-15/2.d0-pi2+2*ddilog(t/m2)-2*ddilog(-t/(s-m2))+
     #     2*ddilog(t/(t-m2))-2*ddilog(-(s+t-m2)/(m2-t))+
     #     2*xln1mm2os**2-xln1mm2os*(3+2*xlnmu2om2+2*xlnm2os)+
     #     xlnmtosmm2**2-2*xlnmtosmm2*(xlnmu2om2+xlnm2os+xln1ptosmm2)+
     #     xln1mtom2*(3-m2/t+2*xlnmu2om2)-
     #     2*xlnm2mtom2s*(xlnmu2om2+xlnm2os)-
     #     xlnmtom2**2+xlnmtom2*(3+2*xlnmu2om2)+
     #     xlnm2os**2+xlnm2os*(3*xlnmu2om2+(3*s-7*m2)/(2*(s-m2)))-
     #     3*xlnmu2om2
      svtbfac2=tmp1+tmp2+tmp3
      return
      end


      function svsnonfac(s,t,u)
c The not proportional to Born in the FKS finite part, s-channel
      implicit none
      include 'stpcblks.h'
      real*8 svsnonfac,s,t,u,s1,m2,lns1m2
c
      m2 = xm12
      s1 = s-m2
      u = m2-s-t
      lns1m2 = log(s1/m2)
      svsnonfac = (s-xmW2)**(-2)*( 16*s**(-1)*t*u*m2*lns1m2 )/64d0
c
      return
      end



      function svtnonfac(s,t,u)
c The not proportional to Born in the FKS finite part, t-channel
      implicit none
      include 'stpcblks.h'
      real*8 svtnonfac,s,t,u,t1,m2,lnt1m2
c
      m2 = xm12
      t1 = t-m2
      lnt1m2 = log(-t1/m2)
      svtnonfac = (t-xmW2)**(-2)* ( 16*s*t**(-1)*u*m2*lnt1m2 )/64d0
c
      return
      end


      subroutine f2pr(xs,xt,xx,xxc,xyic,xxlmude,jproc,xmatout)
c Returns sig_2pr of FKS. The normalization is such that
c  dsigma^{(pr)} = g_W^4 as/(2*pi) |V_ij|^2 |V_tk|^2 f2pr/xii dxii dphi_2
c Entries:
c   xs, xt = Mandelstam invariants
c   xx = 1-xii, with xii that of the event
c   xxc = 1-xii, with xii that of the event or of the counterevent
c   xyic = 1  ==> selects the first 3 lines in 5.7  (collinear +)
c   xyic = -1 ==> selects the second 3 lines in 5.7  (collinear -)
c   if xxc # 1, takes the regular part of K 
c   if xxc = 1  takes the delta-function part of K 
c 
      implicit none
      real * 8 xs,xt,xx,xxc,xyic,xxlmude,xmatout(8,2)
      include 'stpcblks.h'
      real * 8 one,xicut,deltai,deltao,s,t,xii,xiic,yic,xlmude,
     # x_ap,s_red,xdfct1,ap_kern,xdfct2,apprime_kern,xdfct3p,
     # xdfct3l,xdfct5,xkplus,xklog,xkreg,xkdelta,tmp
      real * 8 xmatin(8,2)
      common/parsub/xicut,deltai,deltao
      parameter (one=1.d0)
      character * 2 scheme
      integer i,j,jproc,icode,itwo,ilim,idrmax(2:3,2)
      common/cidrmax/idrmax
      integer idrlimcp(2,2:3,8),idrlimcm(2,2:3,8)
      common/cidrlims/idrlimcp,idrlimcm
      parameter (itwo=2)
c
      s=xs
      t=xt
      xii=1-xx
      xiic=1-xxc
      yic=xyic
      xlmude=xxlmude
c
      x_ap=1-xiic
      s_red=s*x_ap
c The appropiate value for t is set in the main code,
c here it is the same as entered in the call to f2pr
      call fborn(s_red,t,itwo,xmatin)
      if(jproc.eq.2)then
        icode=4
      elseif(jproc.eq.3)then
        icode=2
      else
        write(*,*)'Unknown process in f2pr',jproc
        stop
      endif
      if(yic.eq.1.d0)then
        scheme=schhad1
      elseif(yic.eq.-1.d0)then
        scheme=schhad2
      else
        write(6,*)'Error in f2pr',yic
        stop
      endif
c
      xdfct1=ap_kern(x_ap,abs(icode))
      xdfct2=apprime_kern(x_ap,abs(icode))
      xdfct3p=0.d0
      xdfct3l=0.d0
      xdfct5=0.d0
c
      if(scheme.eq.'DI')then
        xdfct3p=xkplus(x_ap,abs(icode))
        xdfct3l=xklog(x_ap,abs(icode))
        if(xiic.ne.0.d0)then
          xdfct5=xkreg(x_ap,abs(icode))
        else
          xdfct5=xkdelta(abs(icode))
     #           +xkplus(one,abs(icode))*log(xicut)
     #           +xklog(one,abs(icode))*log(xicut)**2/2.d0
c This part contributes to sig2pr(soft), which is integrated in xi
c over the range (0,xicut). This implies the presence of a jacobian
c equal to xicut in the soft term, which has to be removed by hand
c in this case
          xdfct5=xdfct5/xicut
        endif
      elseif(scheme.ne.'MS')then
        write(6,*)'Error in f2pr_und, y=',yic
        write(6,*)'Factorization scheme ',scheme,' not known'
      endif
c 1/xi is the main code
      tmp=xdfct1*(xlmude+2*log(xii))-xdfct2
     #    -xdfct3p-xdfct3l*log(xii) 
     #    -xii*xdfct5
c
      do j=1,2
        do i=1,idrmax(jproc,j)
          if(yic.eq.1.d0)then
            ilim=idrlimcp(j,jproc,i)
          elseif(yic.eq.-1.d0)then
            ilim=idrlimcm(j,jproc,i)
          endif
          if(ilim.ne.0)then
            xmatout(i,j)=tmp*xmatin(ilim,j)
          else
            xmatout(i,j)=0.d0
          endif
        enddo
      enddo
      return
      end


      subroutine fborn(s,t,jproc,xmatout)
c Returns the partonic Born contribution, with the following normalization
c    dsigma_born = g_W^4 |V_ij|^2 |V_tk|^2 fborn dphi_2
c with g_W^4 and CKM factors inserted in the main codes. See freal
c for the conventions used for the array xmatout
c
c With p1 denoting the momentum of the parton coming from the left
c (= +z-component) and k1 the momentum of the top quark, we define
c t = (p1-k1)^2 = (p2-k2)^2
c u = (p1-k2)^2 = (p2-k1)^2
c Note that for the (jproc=2) qqbar(i=1) and qbarq (i=3)
c channels, p1 labels the quark and antiquark respectively.
c
c s = (p1+p2)^2 and is therefore unambiguous
c
      implicit none
      include 'stpcblks.h'
      real*8 s,t,u,Wprop_s,Wprop_t,Wprop_u,xmatout(8,2),pi
      integer jproc,i,j,idrmax(2:3,2)
      common/cidrmax/idrmax
      parameter (pi=3.14159265358979312D0)
c
      if(jproc.ne.2.and.jproc.ne.3)then
        write(*,*)'Error in fborn: jproc=',jproc
        stop
      endif
c
      do j=1,2
        do i=1,idrmax(jproc,j)
          xmatout(i,j) = 0d0
        enddo
      enddo
c
      if(jproc.eq.2)then
        u = xm12+xm22-s-t
        Wprop_s = s-xmW2
        Wprop_t = t-xmW2
        Wprop_u = u-xmW2
c s-channel
        xmatout(1,1) = ( (u-xm12)*(u-xm22)/4d0/(Wprop_s**2) )/(2*s)
        xmatout(3,1) = ( (t-xm12)*(t-xm22)/4d0/(Wprop_s**2) )/(2*s)
c t-channel: 1 and 2 have the same CKM weights as 3 and 4 respectively
        xmatout(1,2) = ( s*(s-xm12-xm22)/4d0/(Wprop_t**2) )/(2*s)
        xmatout(2,2) = ( u*(u-xm12-xm22)/4d0/(Wprop_t**2) )/(2*s)
        xmatout(3,2) = ( s*(s-xm12-xm22)/4d0/(Wprop_u**2) )/(2*s)
        xmatout(4,2) = ( t*(t-xm12-xm22)/4d0/(Wprop_u**2) )/(2*s)
      endif
c
      return
      end


      subroutine stmatr_qq(s,tk,uk,q1q,q2q,xmatout)
c Real matrix element squared, without damping and flux factors; qq processes
      implicit none
      include 'stpcblks.h'
      real*8 s,tk,uk,q1q,q2q,xmatout(8,2),q1c,q2c,w1,w2,s2,
     # t12,t13,t14,t15,t23,t24,t25,t34,t35,t45,pi,vcf,
     # Prop1_1,Prop2_1,Prop1_2,Prop2_2,Prop1_3,Prop2_3,Prop1_4,Prop2_4,
     # MApMB2,MCpMD2,
     # rMApMB2_s1,rMCpMD2_s1,rMApMB2_s3,rMCpMD2_s3,
     # rMApMB2_t1,rMCpMD2_t1,rMApMB2_t2,rMCpMD2_t2,
     # rMApMB2_t3,rMCpMD2_t3,rMApMB2_t4,rMCpMD2_t4
      parameter (pi=3.14159265358979312D0)
      parameter (vcf=4.d0/3.d0)
      integer i,j,idrmax(2:3,2)
      common/cidrmax/idrmax
c
      do j=1,2
        do i=1,idrmax(2,j)
          xmatout(i,j) = 0d0
        enddo
      enddo
c
      s2 = s+tk+uk
      q1c = xm12 + xm22 - s - tk - q1q
      q2c = xm12 + xm22 - s - uk - q2q
      w1  = xm12 - q1q + q2q - tk
      w2  = xm22 - q2q + q1q - uk
c
c Map FNR invariants into Eric's sij's, according to the following rules
c  p1->-q1;  p2->-q2;  k1->q3;  k2->q4; k->q5
c This is just a renaming scheme for FNR invariants, and it is not
c associated with any specific short-distance process. In this way,
c 1 and 2 in sij are always associated with initial-state partons,
c 3 is the top, 4 is the (anti)bottom, 5 is the gluon.
c Note the minus signs in front of q1 and q2: all q's momenta are in the
c final state, and sij are therefore in a non-physical configuration.
c Since the matrix element routines MApMB2 and MCpMD2 assume the
c invariants to be in a non-physical configuration, no further
c explicit crossing (i.e. adding minus signs) is required. The
c crossing is implicit in the definitions of the sij's above.
c
      t12 = s
      t13 = q1q-xm12
      t14 = q1c-xm22
      t15 = tk
      t23 = q2c-xm12
      t24 = q2q-xm22
      t25 = uk
      t34 = s2-xm12-xm22
      t35 = w1-xm12
      t45 = w2-xm22
c
c s-channel
c
      Prop1_1 = 1d0/(t12+t15+t25-xmW2)      
      Prop2_1 = 1d0/(t12-xmW2)      
      rMApMB2_s1 = MApMB2(xm12,t12,t13,t14,t15,
     #                    t23,t24,t25,t34,t35,t45)
      rMCpMD2_s1 = MCpMD2(xm12,t12,t13,t14,t15,
     #                    t23,t24,t25,t34,t35,t45)
c
      Prop1_3 = Prop1_1
      Prop2_3 = Prop2_1
      rMApMB2_s3 = MApMB2(xm12,t12,t23,t24,t25,
     #                    t13,t14,t15,t34,t35,t45)
      rMCpMD2_s3 = MCpMD2(xm12,t12,t23,t24,t25,
     #                    t13,t14,t15,t34,t35,t45)
c
      xmatout(1,1) = vcf*( Prop1_1**2*rMApMB2_s1 + 
     #                     Prop2_1**2*rMCpMD2_s1 )/4.d0
      xmatout(3,1) = vcf*( Prop1_3**2*rMApMB2_s3 + 
     #                     Prop2_3**2*rMCpMD2_s3 )/4.d0
c
c t-channel
c
      Prop1_1 = 1d0/(t24+t25+t45-xmW2)      
      Prop2_1 = 1d0/(t24-xmW2)      
      rMApMB2_t1 = MApMB2(xm12,t24,t23,t12,t25,
     #                    t34,t14,t45,t13,t35,t15)
      rMCpMD2_t1 = MCpMD2(xm12,t24,t23,t12,t25,
     #                    t34,t14,t45,t13,t35,t15)
c
      Prop1_2 = 1d0/(t24+t45+t25-xmW2)      
      Prop2_2 = 1d0/(t24-xmW2)      
      rMApMB2_t2 = MApMB2(xm12,t24,t34,t14,t45,
     #                    t23,t12,t25,t13,t35,t15)
      rMCpMD2_t2 = MCpMD2(xm12,t24,t34,t14,t45,
     #                    t23,t12,t25,t13,t35,t15)
c
      Prop1_3 = 1d0/(t14+t15+t45-xmW2)      
      Prop2_3 = 1d0/(t14-xmW2)      
      rMApMB2_t3 = MApMB2(xm12,t14,t13,t12,t15,
     #                    t34,t24,t45,t23,t35,t25)
      rMCpMD2_t3 = MCpMD2(xm12,t14,t13,t12,t15,
     #                    t34,t24,t45,t23,t35,t25)
c
      Prop1_4 = 1d0/(t14+t45+t15-xmW2)      
      Prop2_4 = 1d0/(t14-xmW2)      
      rMApMB2_t4 = MApMB2(xm12,t14,t34,t24,t45,
     #                    t13,t12,t15,t23,t35,t25)
      rMCpMD2_t4 = MCpMD2(xm12,t14,t34,t24,t45,
     #                    t13,t12,t15,t23,t35,t25)
c
      xmatout(1,2) = vcf*( Prop1_1**2*rMApMB2_t1 + 
     #                     Prop2_1**2*rMCpMD2_t1 )/4.d0
      xmatout(2,2) = vcf*( Prop1_2**2*rMApMB2_t2 + 
     #                     Prop2_2**2*rMCpMD2_t2 )/4.d0
      xmatout(3,2) = vcf*( Prop1_3**2*rMApMB2_t3 + 
     #                     Prop2_3**2*rMCpMD2_t3 )/4.d0
      xmatout(4,2) = vcf*( Prop1_4**2*rMApMB2_t4 + 
     #                     Prop2_4**2*rMCpMD2_t4 )/4.d0
c
      return
      end


      subroutine stmatr_qg(s,tk,uk,q1q,q2q,xmatout)
c Real matrix element squared, without damping and flux factors; qg processes
      implicit none
      include 'stpcblks.h'
      real*8 s,tk,uk,q1q,q2q,xmatout(8,2),q1c,q2c,w1,w2,s2,
     # t12,t13,t14,t15,t23,t24,t25,t34,t35,t45,pi,vtf,
     # Prop1_1,Prop1_2,Prop1_5,Prop1_6,
     # Prop1_3,Prop1_4,Prop1_7,Prop1_8,
     # MApMB2,MCpMD2,rMApMB2_s1,rMApMB2_s2,rMApMB2_s3,
     # rMApMB2_s4,rMApMB2_t1,rMCpMD2_t2,rMApMB2_t3,rMCpMD2_t4,
     # rMCpMD2_t5,rMApMB2_t6,rMCpMD2_t7,rMApMB2_t8,xdampd,xdampr
      parameter (pi=3.14159265358979312D0)
      parameter (vtf=1.d0/2.d0)
      integer i,j,idrmax(2:3,2)
      common/cidrmax/idrmax
c
      do j=1,2
        do i=1,idrmax(3,j)
          xmatout(i,j) = 0d0
        enddo
      enddo
c
      s2 = s+tk+uk
      q1c = xm12 + xm22 - s - tk - q1q
      q2c = xm12 + xm22 - s - uk - q2q
      w1  = xm12 - q1q + q2q - tk
      w2  = xm22 - q2q + q1q - uk
c
c Map FNR invariants into Eric's sij's, according to the following rules
c  p1->-q1;  p2->-q2;  k1->q3;  k2->q4; k->q5
c This is just a renaming scheme for FNR invariants, and it is not
c associated with any specific short-distance process. In this way,
c 1 and 2 in sij are always associated with initial-state partons,
c 3 is the top, 4 is the (anti)bottom, 5 is the gluon.
c Note the minus signs in front of q1 and q2: all q's momenta are in the
c final state, and sij are therefore in a non-physical configuration.
c Since the matrix element routines MApMB2 and MCpMD2 assume the
c invariants to be in a non-physical configuration, no further
c explicit crossing (i.e. adding minus signs) is required. The
c crossing is implicit in the definitions of the sij's above.
c
      t12 = s
      t13 = q1q-xm12
      t14 = q1c-xm22
      t15 = tk
      t23 = q2c-xm12
      t24 = q2q-xm22
      t25 = uk
      t34 = s2-xm12-xm22
      t35 = w1-xm12
      t45 = w2-xm22
c
c s-channel
c
      Prop1_1 = 1d0/(t15+t12+t25-xmW2)      
      rMApMB2_s1 = -MApMB2(xm12,t15,t13,t14,t12,
     #                     t35,t45,t25,t34,t23,t24)
c
      Prop1_2 = 1d0/(t15+t25+t12-xmW2)      
      rMApMB2_s2 = -MApMB2(xm12,t15,t35,t45,t25,
     #                     t13,t14,t12,t34,t23,t24)
c
      Prop1_3 = 1d0/(t25+t12+t15-xmW2)      
      rMApMB2_s3 = -MApMB2(xm12,t25,t23,t24,t12,
     #                     t35,t45,t15,t34,t13,t14)
c
      Prop1_4 = 1d0/(t25+t15+t12-xmW2)      
      rMApMB2_s4 = -MApMB2(xm12,t25,t35,t45,t15,
     #                     t23,t24,t12,t34,t13,t14)
c 
      xmatout(1,1) = vtf*Prop1_1**2*rMApMB2_s1/4.d0
      xmatout(2,1) = vtf*Prop1_2**2*rMApMB2_s2/4.d0
      xmatout(3,1) = vtf*Prop1_3**2*rMApMB2_s3/4.d0
      xmatout(4,1) = vtf*Prop1_4**2*rMApMB2_s4/4.d0
c
c t-channel
c
      xdampd = q2q*q1c/( q2q*q1c+tk*uk )
      xdampr = xdampd
c The following is an alternative form, which gives identical results
c up to differences which vanish by increasing the statistics. Use the
c former since it gives slightly better numerical performances
c      xdampd = q2q/( q2q+uk )
c      xdampr = q1c/( q1c+tk )
c
      Prop1_1 = 1d0/(t24+t45+t25-xmW2)      
      rMApMB2_t1 = -MApMB2(xm12,t45,t35,t15,t25,
     #                     t34,t14,t24,t13,t23,t12)
      rMApMB2_t1 = rMApMB2_t1 * xdampd
c
      Prop1_2 = 1d0/(t24-xmW2)      
      rMCpMD2_t2 = -MCpMD2(xm12,t24,t23,t25,t12,
     #                     t34,t45,t14,t35,t13,t15)
c
      Prop1_3 = 1d0/(t24+t45+t25-xmW2)
      rMApMB2_t3 = -MApMB2(xm12,t45,t34,t14,t24,
     #                     t35,t15,t25,t13,t23,t12)
      rMApMB2_t3 = rMApMB2_t3 * xdampd
c
      Prop1_4 = 1d0/(t24-xmW2)
      rMCpMD2_t4 = -MCpMD2(xm12,t24,t34,t45,t14,
     #                     t23,t25,t12,t35,t13,t15)
c------------------------------------
c     idr = 5: idr = 2 with 1 <--> 2
c     idr = 6: idr = 1 with 1 <--> 2
c     idr = 7: idr = 4 with 1 <--> 2
c     idr = 8: idr = 3 with 1 <--> 2
c------------------------------------
      Prop1_5 = 1d0/(t14-xmW2)      
      rMCpMD2_t5 = -MCpMD2(xm12,t14,t13,t15,t12,
     #                     t34,t45,t24,t35,t23,t25)
c
      Prop1_6 = 1d0/(t14+t45+t15-xmW2)      
      rMApMB2_t6 = -MApMB2(xm12,t45,t35,t25,t15,
     #                     t34,t24,t14,t23,t13,t12)
      rMApMB2_t6 = rMApMB2_t6 * xdampr
c
      Prop1_7 = 1d0/(t14-xmW2)
      rMCpMD2_t7 = -MCpMD2(xm12,t14,t34,t45,t24,
     #                     t13,t15,t12,t35,t23,t25)
c
      Prop1_8 = 1d0/(t14+t45+t15-xmW2)
      rMApMB2_t8 = -MApMB2(xm12,t45,t34,t24,t14,
     #                     t35,t25,t15,t23,t13,t12)
      rMApMB2_t8 = rMApMB2_t8 * xdampr
c
      xmatout(1,2) = vtf*Prop1_1**2*rMApMB2_t1/4.d0
      xmatout(2,2) = vtf*Prop1_2**2*rMCpMD2_t2/4.d0
      xmatout(3,2) = vtf*Prop1_3**2*rMApMB2_t3/4.d0
      xmatout(4,2) = vtf*Prop1_4**2*rMCpMD2_t4/4.d0 
c
      xmatout(5,2) = vtf*Prop1_5**2*rMCpMD2_t5/4.d0
      xmatout(6,2) = vtf*Prop1_6**2*rMApMB2_t6/4.d0
      xmatout(7,2) = vtf*Prop1_7**2*rMCpMD2_t7/4.d0
      xmatout(8,2) = vtf*Prop1_8**2*rMApMB2_t8/4.d0
c
      return
      end

c
c In the functions MApMB2 and MCpMD2, all partons are outgoing, with
c   1=qbar,  2=q,  3=top,  4=bbar,  5=gluon
c
      real*8 function MApMB2(m2,s12,s13,s14,s15,s23,
     #                       s24,s25,s34,s35,s45)
c Square of the corrections to the light-quark weak current
      implicit real*8(a-z)
      MApMB2=
     &    2*s15**(-1)*s25**(-1)*s35*s14*s12 + 2*s15**(-1)*s25**(-1)*s45
     &    *s23*s12 + 4*s15**(-1)*s25**(-1)*s14*s23*s12 + 2*s15**(-1)*
     &    s45*s23 - 2*s15**(-1)*s14*s13 + 2*s15**(-1)*s14*s23 + 2*
     &    s25**(-1)*s35*s14 + 2*s25**(-1)*s14*s23 - 2*s25**(-1)*s24*s23
      return
      end

      real*8 function MCpMD2(m2,s12,s13,s14,s15,s23,
     #                       s24,s25,s34,s35,s45)
c Square of the corrections to the heavy-quark weak current
      implicit real*8(a-z)
      MCpMD2=
     &  - 4*m2*s25*s35**(-2)*s14 - 4*m2*s35**(-2)*s14*s23 + 2*s15*
     &    s35**(-1)*s45**(-1)*s34*s23 + 2*s15*s45**(-1)*s23 + 2*s25*
     &    s35**(-1)*s45**(-1)*s14*s34 + 2*s25*s35**(-1)*s14 + 4*
     &    s35**(-1)*s45**(-1)*s14*s34*s23 + 2*s35**(-1)*s14*s23 - 2*
     &    s35**(-1)*s13*s23 - 2*s45**(-1)*s14*s24 + 2*s45**(-1)*s14*s23
      return
      end
c
c
c From the jet package, Altarelli-Parisi kernels and change of scheme
c
c
      function ap_kern(x,index)
c This function returns the quantity (1-x)*P_{ab}(x), where
c P_{ab} are the Altarelli-Parisi kernels, and the splitting partons
c {ab} are defined with the following conventions
c
c         index          ab
c
c           1            gg
c           2            qg
c           3            gq
c           4            qq
c
      implicit real * 8 (a-h,o-z)
      parameter (vcf=4.d0/3.d0)
      parameter (vtf=1.d0/2.d0)
      parameter (vca=3.d0)
c
      if(index.eq.1)then
        ap_kern=2*vca*(x+(1-x)**2/x+x*(1-x)**2)
      elseif(index.eq.2)then
        ap_kern=vtf*(1-x)*(x**2+(1-x)**2)
      elseif(index.eq.3)then
        ap_kern=vcf*(1-x)*(1+(1-x)**2)/x
      elseif(index.eq.4)then
        ap_kern=vcf*(1+x**2)
      else
        write(6,*)'Error in ap_kern: wrong index value'
        stop
      endif
      return
      end


      function apprime_kern(x,index)
c This function returns the quantity (1-x)*P_{ab}^{prime}(x), where
c P_{ab}^{prime} is the ep-dependent part of the Altarelli-Parisi kernels, 
c and the codes for the splitting partons {ab} are defined above
      implicit real * 8 (a-h,o-z)
      parameter (vcf=4.d0/3.d0)
      parameter (vtf=1.d0/2.d0)
      parameter (vca=3.d0)
c
      if(index.eq.1)then
        apprime_kern=0.d0
      elseif(index.eq.2)then
        apprime_kern=-2*vtf*x*(1-x)**2
      elseif(index.eq.3)then
        apprime_kern=-vcf*(1-x)*x
      elseif(index.eq.4)then
        apprime_kern=-vcf*(1-x)**2
      else
        write(6,*)'Error in apprime_kern: wrong index value'
        stop
      endif
      return
      end


      function xkdelta(index)
c This function returns the quantity K^{(d)}_{ab}, relevant for
c the MS --> DIS change in the factorization scheme. 
c The codes for the splitting partons {ab} are defined above
      implicit real * 8 (a-h,o-z)
      parameter (pi=3.14159265358979312D0)
      parameter (vcf=4.d0/3.d0)
      parameter (vtf=1.d0/2.d0)
      parameter (vca=3.d0)
      parameter (xnc=3.d0)
      common/nl/nl
c
      if(index.eq.1)then
        xkdelta=0.d0
      elseif(index.eq.2)then
        xkdelta=0.d0
      elseif(index.eq.3)then
        xkdelta=vcf*(9.d0/2.d0+pi**2/3.d0)
      elseif(index.eq.4)then
        xkdelta=-vcf*(9.d0/2.d0+pi**2/3.d0)
      else
        write(6,*)'Error in xkdelta: wrong index value'
        stop
      endif
      return
      end


      function xkplus(x,index)
c This function returns the quantity K^{(+)}_{ab}(x), relevant for
c the MS --> DIS change in the factorization scheme. Notice that
c there's NO multiplicative (1-x) factor like in the previous functions.
c The codes for the splitting partons {ab} are defined above
      implicit real * 8 (a-h,o-z)
      parameter (vcf=4.d0/3.d0)
      parameter (vtf=1.d0/2.d0)
      parameter (vca=3.d0)
      parameter (xnc=3.d0)
      common/nl/nl
c
      if(index.eq.1)then
        xkplus=0.d0
      elseif(index.eq.2)then
        xkplus=0.d0
      elseif(index.eq.3)then
        xkplus=-vcf*(-3.d0/2.d0-(1+x**2)*log(x)+(1-x)*(3+2*x))
      elseif(index.eq.4)then
        xkplus=vcf*(-3.d0/2.d0-(1+x**2)*log(x)+(1-x)*(3+2*x))
      else
        write(6,*)'Error in xkplus: wrong index value'
        stop
      endif
      return
      end


      function xklog(x,index)
c This function returns the quantity K^{(l)}_{ab}(x), relevant for
c the MS --> DIS change in the factorization scheme. Notice that
c there's NO multiplicative (1-x) factor like in the previous functions.
c The codes for the splitting partons {ab} are defined above
      implicit real * 8 (a-h,o-z)
      parameter (vcf=4.d0/3.d0)
      parameter (vtf=1.d0/2.d0)
      parameter (vca=3.d0)
      parameter (xnc=3.d0)
      common/nl/nl
c
      if(index.eq.1)then
        xklog=0.d0
      elseif(index.eq.2)then
        xklog=0.d0
      elseif(index.eq.3)then
        xklog=-vcf*(1+x**2)
      elseif(index.eq.4)then
        xklog=vcf*(1+x**2)
      else
        write(6,*)'Error in xklog: wrong index value'
        stop
      endif
      return
      end


      function xkreg(x,index)
c This function returns the quantity K^{(reg)}_{ab}(x), relevant for
c the MS --> DIS change in the factorization scheme. Notice that
c there's NO multiplicative (1-x) factor like in the previous functions.
c The codes for the splitting partons {ab} are defined above
      implicit real * 8 (a-h,o-z)
      parameter (vcf=4.d0/3.d0)
      parameter (vtf=1.d0/2.d0)
      parameter (vca=3.d0)
      parameter (xnc=3.d0)
      common/nl/nl
c
      if(index.eq.1)then
        xkreg=-2*nl*vtf*( (x**2+(1-x)**2)*log((1-x)/x)+8*x*(1-x)-1 )
      elseif(index.eq.2)then
        xkreg=vtf*( (x**2+(1-x)**2)*log((1-x)/x)+8*x*(1-x)-1 )
      elseif(index.eq.3)then
        xkreg=0.d0
      elseif(index.eq.4)then
        xkreg=0.d0
      else
        write(6,*)'Error in xkreg: wrong index value'
        stop
      endif
      return
      end
c
c
c Begin of lepton matrix elements (from MadEvent): use for spin correlations
c
c
      function xmadevst(iborn,ist,jproc,idr,s,x,yi,yj,xmom)
c Wrapper for MadEvent functions. Inputs are 
c   iborn   = 0(born), 1(real)
c   ist     = 1(s-ch), 2(t-ch)
c   jproc   = 2(qq), 3(qg)
c   idr     = 1..8 (depends on jproc)
c   s       = parton cm energy squared
c   x,yi,yj = FKS phase-space variables
c   xmom    = 4-momenta obtained from invar
c Output is the matrix element squared in GeV^-2, times the flux factor,
c times the damping factor 
c   (1-x)**2*(1-yi**2)    when    yj=2   (initial-state kinematics)
c   (1-x)**2*(1-yj)       when    yi=2   (final-state kinematics)
c in the case of real matrix elements.
c MadEvent routines use the SM parameters as defined in setmepar();
c for kinematic-dependent couplings, and if simple factorized
c expressions can't be found (which appears to happen only if a Higgs 
c is involved in the reaction), the call to setmepar() must be included
c in this routine. In the present case, all the Born (real) formulae 
c are proportional to gw^8 (gs^2*gw^8), and this call can be placed 
c somewhere else (and done only once).
      implicit none
      integer iborn,ist,jproc,idr
      real*8 xmadevst,s,x,yi,yj,xmom(8,4),xfact,tmp(1)
      real*8 dotxmomcm,q2q,q1c,tk,uk
      real*8 pme0(0:3,6),pme1(0:3,7)
      real*8 sthw2,cthw2
      common/cweinan/sthw2,cthw2
      integer ipart,icomp,i,j
c Components: MC@NLO conventions   -> 1=px, 2=py, 3=pz, 4=E
c             MadEvent conventions -> 0=E, 1=px, 2=py, 3=pz
      integer mapcomp(0:3)
      data mapcomp/4,1,2,3/
C Damping factors for bg->tu~d      
      real*8 xdampd
c Labelling conventions for subprocess: 
c MC@NLO   -> x(1)y(2) -> z(3)t(4)[->l+(6)nu(7)b(8)]w(5)
c MadEvent -> u(1)db(2)-> l+(3)nu(4)b(5) bb(6)
c MadEvent -> b(1)u(2) -> l+(3)nu(4)b(5) d(6)
c MadEvent -> b(1)db(2)-> l+(3)nu(4)b(5) ub(6)
c MadEvent -> u(1)db(2)-> l+(3)nu(4)b(5) bb(6) g(7)
c MadEvent -> b(1)u(2) -> l+(3)nu(4)b(5) d(6) g(7)
c MadEvent -> b(1)db(2)-> l+(3)nu(4)b(5) ub(6) g(7)
c MadEvent -> u(1)g(2) -> l+(3)nu(4)b(5) bb(6) d(7)
c MadEvent -> db(1)g(2)-> l+(3)nu(4)b(5) bb(6) ub(7)
c MadEvent -> b(1)g(2) -> l+(3)nu(4)b(5) ub(6) d(7)
c
c EL define map_iborn_(2)_jproc_idr arrays
c Born, s and t channels
      integer map_0_2_1(6)
      integer map_0_2_2(6)
      integer map_0_2_3(6)
      integer map_0_2_4(6)
c Real, s and t channels
      integer map_1_2_1(7)
      integer map_1_2_3(7)
      integer map_1_2_2(7)
      integer map_1_2_4(7)
c Real, s channel
      integer map_1_3_1(7)
      integer map_1_3_2(7)
      integer map_1_3_3(7)
      integer map_1_3_4(7)
c Real, t channel
      integer map_1_2_3_1(7)
      integer map_1_2_3_2(7)
      integer map_1_2_3_3(7)
      integer map_1_2_3_4(7)
      integer map_1_2_3_5(7)
      integer map_1_2_3_6(7)
      integer map_1_2_3_7(7)
      integer map_1_2_3_8(7)
c
      data map_0_2_1/ 1,2,6,7,8,5 /
      data map_0_2_2/ 1,2,6,7,8,5 /
      data map_0_2_3/ 2,1,6,7,8,5 /
      data map_0_2_4/ 2,1,6,7,8,5 /
      data map_1_2_1/ 1,2,6,7,8,5,3 /
      data map_1_2_3/ 2,1,6,7,8,5,3 /
      data map_1_2_2/ 1,2,6,7,8,5,3 /
      data map_1_2_4/ 2,1,6,7,8,5,3 /
      data map_1_3_1/ 1,2,6,7,8,5,3/
      data map_1_3_2/ 1,2,6,7,8,5,3/
      data map_1_3_3/ 2,1,6,7,8,5,3 /
      data map_1_3_4/ 2,1,6,7,8,5,3 /
      data map_1_2_3_1/ 1,2,6,7,8,3,5/
      data map_1_2_3_2/ 2,1,6,7,8,3,5/
      data map_1_2_3_3/ 1,2,6,7,8,5,3 /
      data map_1_2_3_4/ 2,1,6,7,8,3,5/
      data map_1_2_3_5/ 1,2,6,7,8,3,5/
      data map_1_2_3_6/ 2,1,6,7,8,3,5/
      data map_1_2_3_7/ 1,2,6,7,8,3,5/
      data map_1_2_3_8/ 2,1,6,7,8,5,3 /
c
      xdampd=1.d0
      if(iborn.eq.0)then
        xfact=1.d0
        do ipart=1,6
          do icomp=0,3
            if(ist.eq.1.and.jproc.eq.2.and.idr.eq.1)then
              pme0(icomp,ipart)=xmom(map_0_2_1(ipart),mapcomp(icomp))
            elseif(ist.eq.1.and.jproc.eq.2.and.idr.eq.3)then
              pme0(icomp,ipart)=xmom(map_0_2_3(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.1)then
              pme0(icomp,ipart)=xmom(map_0_2_1(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.3)then
              pme0(icomp,ipart)=xmom(map_0_2_3(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.2)then
              pme0(icomp,ipart)=xmom(map_0_2_2(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.4)then
              pme0(icomp,ipart)=xmom(map_0_2_4(ipart),mapcomp(icomp))
            else
              write(*,*)'Error #1 in xmadevst: idr=',idr
              stop
            endif
          enddo
        enddo
      elseif(iborn.eq.1)then
        if(yj.eq.2.d0)then
          xfact=(1-x)**2*(1-yi**2)
        elseif(yi.eq.2.d0)then
          xfact=(1-x)**2*(1-yj)
        else
          write(*,*)'Error #2 in xmadevst: idr=',idr
          stop
        endif
        do ipart=1,7
          do icomp=0,3
            if(ist.eq.1.and.jproc.eq.2.and.idr.eq.1)then
              pme1(icomp,ipart)=xmom(map_1_2_1(ipart),mapcomp(icomp))
            elseif(ist.eq.1.and.jproc.eq.2.and.idr.eq.3)then
              pme1(icomp,ipart)=xmom(map_1_2_3(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.1)then
              pme1(icomp,ipart)=xmom(map_1_2_1(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.2)then
              pme1(icomp,ipart)=xmom(map_1_2_2(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.3)then
              pme1(icomp,ipart)=xmom(map_1_2_3(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.2.and.idr.eq.4)then
              pme1(icomp,ipart)=xmom(map_1_2_4(ipart),mapcomp(icomp))
            elseif(ist.eq.1.and.jproc.eq.3.and.idr.eq.1)then
              pme1(icomp,ipart)=xmom(map_1_3_1(ipart),mapcomp(icomp))
            elseif(ist.eq.1.and.jproc.eq.3.and.idr.eq.2)then
              pme1(icomp,ipart)=xmom(map_1_3_2(ipart),mapcomp(icomp))
            elseif(ist.eq.1.and.jproc.eq.3.and.idr.eq.3)then
              pme1(icomp,ipart)=xmom(map_1_3_3(ipart),mapcomp(icomp))
            elseif(ist.eq.1.and.jproc.eq.3.and.idr.eq.4)then
              pme1(icomp,ipart)=xmom(map_1_3_4(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.1)then
              pme1(icomp,ipart)=xmom(map_1_2_3_1(ipart),mapcomp(icomp))
              tk = -s/2*(1-x)*(1-yi)
              uk = -s/2*(1-x)*(1+yi)
              q1c = -2.*dotxmomcm(1,5)
              q2q = -2.*dotxmomcm(2,5)
              xdampd=q2q*q1c/( q2q*q1c+tk*uk )
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.2)then
              pme1(icomp,ipart)=xmom(map_1_2_3_2(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.3)then
              pme1(icomp,ipart)=xmom(map_1_2_3_3(ipart),mapcomp(icomp))
              tk = -s/2*(1-x)*(1-yi)
              uk = -s/2*(1-x)*(1+yi)
              q1c = -2.*dotxmomcm(1,5)
              q2q = -2.*dotxmomcm(2,5)
              xdampd=q2q*q1c/( q2q*q1c+tk*uk)
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.4)then
              pme1(icomp,ipart)=xmom(map_1_2_3_4(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.5)then
              pme1(icomp,ipart)=xmom(map_1_2_3_5(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.6)then
              pme1(icomp,ipart)=xmom(map_1_2_3_6(ipart),mapcomp(icomp))
              tk = -s/2*(1-x)*(1-yi)
              uk = -s/2*(1-x)*(1+yi)
              q1c = -2.*dotxmomcm(1,5)
              q2q = -2.*dotxmomcm(2,5)
              xdampd=q2q*q1c/( q2q*q1c+tk*uk)
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.7)then
              pme1(icomp,ipart)=xmom(map_1_2_3_7(ipart),mapcomp(icomp))
            elseif(ist.eq.2.and.jproc.eq.3.and.idr.eq.8)then
              pme1(icomp,ipart)=xmom(map_1_2_3_8(ipart),mapcomp(icomp))
              tk = -s/2*(1-x)*(1-yi)
              uk = -s/2*(1-x)*(1+yi)
              q1c = -2.*dotxmomcm(1,5)
              q2q = -2.*dotxmomcm(2,5)
              xdampd=q2q*q1c/( q2q*q1c+tk*uk)
            else
              write(*,*)'Error #3 in xmadevst: idr=',idr
              stop
            endif
          enddo
        enddo
      else
        write(*,*)'xmadevst: unknown iborn value',iborn
        stop
      endif
      if(iborn.eq.0.and.ist.eq.1.and.jproc.eq.2.and.idr.eq.1)then
        call udb_tbb(pme0,tmp)
      elseif(iborn.eq.0.and.ist.eq.1.and.jproc.eq.2.and.idr.eq.3)then
        call udb_tbb(pme0,tmp)
      elseif(iborn.eq.0.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.1)then
        call bu_td(pme0,tmp)
      elseif(iborn.eq.0.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.3)then
        call bu_td(pme0,tmp)
      elseif(iborn.eq.0.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.2)then
        call bdb_tub(pme0,tmp)
      elseif(iborn.eq.0.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.4)then
        call bdb_tub(pme0,tmp)
      elseif(iborn.eq.1.and.ist.eq.1.and.jproc.eq.2.and.idr.eq.1)then
        call udb_tbbg(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.1.and.jproc.eq.2.and.idr.eq.3)then
        call udb_tbbg(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.1)then
        call bu_tdg(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.2)then
        call bdb_tubg(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.3)then
        call bu_tdg(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.2.and.idr.eq.4)then
        call bdb_tubg(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.1.and.jproc.eq.3.and.idr.eq.1)then
        call ug_tbbd_s(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.1.and.jproc.eq.3.and.idr.eq.2)then
        call dbg_tbbub_s(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.1.and.jproc.eq.3.and.idr.eq.3)then
        call ug_tbbd_s(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.1.and.jproc.eq.3.and.idr.eq.4)then
        call dbg_tbbub_s(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.1)then
        call bg_tubd(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.2)then
        call ug_tbbd_t(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.3)then
        call bg_tubd(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.4)then
        call dbg_tbbub_t(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.5)then
        call ug_tbbd_t(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.6)then
        call bg_tubd(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.7)then
        call dbg_tbbub_t(pme1,tmp)
      elseif(iborn.eq.1.and.ist.eq.2.and.jproc.eq.3.and.idr.eq.8)then
        call bg_tubd(pme1,tmp)
      else
        write(*,*)'Error #4 in xmadevst: no such process',
     #            iborn,ist,jproc,idr
        stop
      endif
c Insert sin(theta_W) for e^8 -> gw^8
      xmadevst=xdampd*sthw2**4*xfact*tmp(1)/(2*s)
      return
      end


      function dotxmomcm(i,j)
c Computes the dot product xmom_cm(i,*).xmom_cm(j,*) 
      implicit none
      real*8 dotxmomcm,tmp
      integer i,j
      real*8 xmom_cm(8,4)
      common/cxmomcm/xmom_cm
c
      if( i.lt.1.or.i.gt.8.or.j.lt.1.or.j.gt.8 )then
        write(*,*)'Improper call of function dotxmomcm',i,j
        stop
      endif
      tmp=xmom_cm(i,4)*xmom_cm(j,4)-xmom_cm(i,1)*xmom_cm(j,1)-
     #    xmom_cm(i,2)*xmom_cm(j,2)-xmom_cm(i,3)*xmom_cm(j,3)
      dotxmomcm=tmp
      return
      end


      subroutine setmepar(xiwmass,xiwwidth,xizmass,xizwidth,
     #                    xitmass,xitwidth,xibmass,xisin2w,xiee2,xig)
c Fills HELAS common blocks for masses and couplings. The electron charge
c squared and the masses may eventually be passed through a common block
c on a event-by-event basis. This code is mainly taken from coupsm-ORIGINAL.F 
c of the HELAS package. Here, we limit ourselves to setting the following
c parameters:
c
c       real    gw                : weak coupling constant
c       real    gwwa              : dimensionless WWA  coupling
c       real    gwwz              : dimensionless WWZ  coupling
c       complex gal(2)            : coupling with A of charged leptons
c       complex gau(2)            : coupling with A of up-type quarks
c       complex gad(2)            : coupling with A of down-type quarks
c       complex gwf(2)            : coupling with W-,W+ of fermions
c       complex gzn(2)            : coupling with Z of neutrinos
c       complex gzl(2)            : coupling with Z of charged leptons
c       complex gzu(2)            : coupling with Z of up-type quarks
c       complex gzd(2)            : coupling with Z of down-type quarks
c       complex gg(2)             : QCD gqq coupling (L,R)
c
c through the following parameters, given in input
c
c       real    zmass,wmass       : weak boson masses
c       real    zwidth,wwidth     : weak boson width
c       real    tmass,twidth      : top mass and width
c       real    bmass             : bottom mass
c       real    sin2w             : square of sine of the weak angle
c       real    ee2               : positron charge squared
c       real    g                 : QCD 3-,4-gluon coupling
c
      implicit none
      real * 8 xiwmass,xiwwidth,xizmass,xizwidth,xitmass,xitwidth,
     #         xibmass,xisin2w,xiee2,xig
      include "MEcoupl.inc"
      double precision zero,half,one,two,three,pi,ee2,sw,cw,ez,ey,sc2,v
      parameter (zero=0.d0)
      parameter (half=0.5d0)
      parameter (one=1.d0)
      parameter (two=2.d0)
      parameter (three=3.d0)
      parameter (pi=3.14159265358979312D0)
c
      wmass = xiwmass
      wwidth= xiwwidth
      zmass = xizmass
      zwidth= xizwidth
      tmass = xitmass
      twidth= xitwidth
      bmass = xibmass
      sin2w = xisin2w
      ee2   = xiee2
      g     = xig
c
      amass=0.d0
      awidth=1.d-99
c
      ee=sqrt(ee2)
      alpha=ee2/(4*pi)
c
      sw  = sqrt( sin2w )
      cw  = sqrt( One - sin2w )
      ez  = ee/(sw*cw)
      ey  = ee*(sw/cw)
      sc2 = sin2w*( One - sin2w )
      v   = Two*zmass*sqrt(sc2)/ee
c
c vector boson couplings
c
      gw   = ee/sw
      gwwa = ee
      gwwz = ee*cw/sw
c
c fermion-fermion-vector couplings
c
      gal(1) = dcmplx(  ee          , Zero )
      gal(2) = dcmplx(  ee          , Zero )
      gau(1) = dcmplx( -ee*Two/Three, Zero )
      gau(2) = dcmplx( -ee*Two/Three, Zero )
      gad(1) = dcmplx(  ee/Three    , Zero )
      gad(2) = dcmplx(  ee/Three    , Zero )
c
      gwf(1) = dcmplx( -ee/sqrt(Two*sin2w), Zero )
      gwf(2) = dcmplx(  Zero              , Zero )
c
      gzn(1) = dcmplx( -ez*Half                     , Zero )
      gzn(2) = dcmplx(  Zero                        , Zero )
      gzl(1) = dcmplx( -ez*(-Half + sin2w)          , Zero )
      gzl(2) = dcmplx( -ey                          , Zero )
      gzu(1) = dcmplx( -ez*( Half - sin2w*Two/Three), Zero )
      gzu(2) = dcmplx(  ey*Two/Three                , Zero )
      gzd(1) = dcmplx( -ez*(-Half + sin2w/Three)    , Zero )
      gzd(2) = dcmplx( -ey/Three                    , Zero )
c
c QCD coupling
c
      gg(1) = dcmplx( -g, Zero )
      gg(2) = gg(1)
c
      return
      end


      subroutine switchmom(p1,p,ic,jc,nexternal)
c**************************************************************************
c     Changes stuff for crossings
c**************************************************************************
      implicit none
      integer nexternal
      integer jc(nexternal),ic(nexternal)
      real*8 p1(0:3,nexternal),p(0:3,nexternal)
      integer i,j
c-----
c Begin Code
c-----
      do i=1,nexternal
         do j=0,3
            p(j,ic(i))=p1(j,i)
         enddo
      enddo
      do i=1,nexternal
         jc(i)=1
      enddo
      jc(ic(1))=-1
      jc(ic(2))=-1
      end


c
c
c Begin of udbar --> tbbar (s channel)
c
c

c++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

C SF: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE UDB_TBB(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u d~ -> e+ ve b b~  
C  
C Crossing   1 is u d~ -> e+ ve b b~  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C SF: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
c      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  6)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATUDB_TBB
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C SF: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C SF: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C SF: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C SF: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    1/          
C SF: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
C SF: comment out all instances of multi_channel
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATUDB_TBB(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATUDB_TBB(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C SF: comment out all instances of multi_channel
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
C SF: the original name MATRIX has been replaced by MATUDB_TBB
      REAL*8 FUNCTION MATUDB_TBB(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u d~ -> e+ ve b b~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   1,NEIGEN=  1) 
C SF: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
c      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  6)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   9, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C SF: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C SF: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     9/                                  
C               T[1,2]T[6,5]                                               
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
      CALL OXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1*IC(5   ),W(1,5   ))        
      CALL IXXXXX(P(0,6   ),ZERO ,NHEL(6   ),-1*IC(6   ),W(1,6   ))        
      CALL JIOXXX(W(1,1   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,6   ),W(1,9   ),W(1,7   ),GWF ,AMP(1   ))            
      JAMP(   1) = -AMP(   1)
      MATUDB_TBB = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATUDB_TBB =MATUDB_TBB+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C SF: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
c
c
c End of udbar --> tbbar (s channel)
c
c



c
c
c Begin of bu --> td (t channel)
c
c
C SF: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE BU_TD(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : b u -> e+ ve b d  
C  
C Crossing   1 is b u -> e+ ve b d  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C SF: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
c      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  6)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATBU_TD
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C SF: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C SF: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C SF: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C SF: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    1/          
C SF: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
C SF: comment out all instances of multi_channel
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATBU_TD(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATBU_TD(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C SF: comment out all instances of multi_channel
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
C SF: the original name MATRIX has been replaced by MATBU_TD
      REAL*8 FUNCTION MATBU_TD(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : b u -> e+ ve b d  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   1,NEIGEN=  1) 
C SF: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
c      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  6)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   9, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C SF: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C SF: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     9/                                  
C               T[1,5]T[2,6]                                               
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1*IC(5   ),W(1,5   ))        
      CALL OXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1*IC(6   ),W(1,6   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL FVOXXX(W(1,5   ),W(1,7   ),GWF ,TMASS   ,TWIDTH  ,W(1,8   ))    
      CALL JIOXXX(W(1,2   ),W(1,6   ),GWF ,WMASS   ,WWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,1   ),W(1,8   ),W(1,9   ),GWF ,AMP(1   ))            
      JAMP(   1) = -AMP(   1)
      MATBU_TD = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATBU_TD =MATBU_TD+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C SF: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
c
c
c End of bu --> td (t channel)
c
c


c
c
c Begin bdb --> tub (t channel)
c
c
C EL: The following routine is SMATRIX generated by MadEvent, suitably modifide
      SUBROUTINE BDB_TUB(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : b d~ -> e+ ve b u~  
C  
C Crossing   1 is b d~ -> e+ ve b u~  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
c      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  6)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATBDB_TUB
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    1/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO

C EL: comment out all instances of multi_channel       
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATBDB_TUB(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATBDB_TUB(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATBDB_TUB(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : b d~ -> e+ ve b u~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   1,NEIGEN=  1) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
c      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  6)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   9, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     9/                                  
C               T[1,5]T[6,2]                                               
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),BMASS ,NHEL(1   ),+1*IC(1   ),W(1,1   ))       
      CALL OXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),ZERO ,NHEL(6   ),-1*IC(6   ),W(1,6   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL FVOXXX(W(1,5   ),W(1,7   ),GWF ,TMASS   ,TWIDTH  ,W(1,8   ))    
      CALL JIOXXX(W(1,6   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,1   ),W(1,8   ),W(1,9   ),GWF ,AMP(1   ))            
      JAMP(   1) = +AMP(   1)
      MATBDB_TUB = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATBDB_TUB =MATBDB_TUB+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END


C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE UDB_TBBG(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u d~ -> e+ ve b b~ g  
C  
C Crossing   1 is u d~ -> e+ ve b b~ g  
      IMPLICIT NONE
C  
C CONSTANTS
C
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATUDB_TBBG
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
C      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
C      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
C      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO

C EL: comment out all instances of multi_channel       
C      IF (multi_channel) THEN
C          DO IHEL=1,NGRAPHS
C              amp2(ihel)=0d0
C              jamp2(ihel)=0d0
C          ENDDO
C          DO IHEL=1,int(jamp2(0))
C              jamp2(ihel)=0d0
C          ENDDO
C      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATUDB_TBBG(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATUDB_TBBG(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
C      IF (MULTI_CHANNEL) THEN
C          XTOT=0D0
C          DO IHEL=1,MAPCONFIG(0)
C              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C          ENDDO
C          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATUDB_TBBG(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u d~ -> e+ ve b b~ g  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  16, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[1,2,7]T[6,5]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[1,2]T[6,5,7]                                             
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
      CALL OXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),BMASS ,NHEL(6   ),-1*IC(6   ),W(1,6   ))       
      CALL VXXXXX(P(0,7   ),ZERO ,NHEL(7   ),+1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,9   ))    
      CALL JIOXXX(W(1,6   ),W(1,9   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,1   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,11  ))     
      CALL IOVXXX(W(1,11  ),W(1,2   ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,2   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL IOVXXX(W(1,1   ),W(1,12  ),W(1,10  ),GWF ,AMP(2   ))            
      CALL JIOXXX(W(1,1   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
C EL: set top width to zero in non-decay parts of diagrams
c      CALL FVIXXX(W(1,6   ),W(1,13  ),GWF ,TMASS   ,TWIDTH  ,W(1,14  ))    
      CALL FVIXXX(W(1,6   ),W(1,13  ),GWF ,TMASS   ,ZERO  ,W(1,14  ))    
      CALL FVOXXX(W(1,5   ),W(1,7   ),GG ,BMASS   ,ZERO    ,W(1,15  ))     
      CALL IOVXXX(W(1,14  ),W(1,15  ),W(1,8   ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,9   ),W(1,13  ),GWF ,BMASS   ,ZERO    ,W(1,16  ))    
      CALL IOVXXX(W(1,6   ),W(1,16  ),W(1,7   ),GG ,AMP(4   ))             
      CALL IOVXXX(W(1,14  ),W(1,9   ),W(1,7   ),GG ,AMP(5   ))             
      JAMP(   1) = -AMP(   1)-AMP(   2)
C EL: eliminate the contribution of diagram #3, in which according to
C EL: matrix.ps the gluon is attached to the b coming from top decay
c      JAMP(   2) = -AMP(   3)-AMP(   4)-AMP(   5)
      JAMP(   2) = -AMP(   4)-AMP(   5)
      MATUDB_TBBG = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATUDB_TBBG =MATUDB_TBBG+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
C      Do I = 1, NGRAPHS
C          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
C      Enddo
C      Do I = 1, NCOLOR
C          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
C      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END


C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE BU_TDG(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : b u -> e+ ve b d g  
C  
C Crossing   1 is b u -> e+ ve b d g  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATBU_TDG
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
C      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
C      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
C      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
C EL: comment out all instances of multi_channel       
C      IF (multi_channel) THEN
C          DO IHEL=1,NGRAPHS
C              amp2(ihel)=0d0
C              jamp2(ihel)=0d0
C          ENDDO
C          DO IHEL=1,int(jamp2(0))
C              jamp2(ihel)=0d0
C          ENDDO
C      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATBU_TDG(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATBU_TDG(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
C      IF (MULTI_CHANNEL) THEN
C          XTOT=0D0
C          DO IHEL=1,MAPCONFIG(0)
C              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C          ENDDO
C          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATBU_TDG(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : b u -> e+ ve b d g  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[1,5,7]T[2,6]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[1,5]T[2,6,7]                                             
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),BMASS ,NHEL(1   ),+1*IC(1   ),W(1,1   ))       
      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL OXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1*IC(6   ),W(1,6   ))        
      CALL VXXXXX(P(0,7   ),ZERO ,NHEL(7   ),+1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,9   ))    
      CALL JIOXXX(W(1,2   ),W(1,6   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,1   ),W(1,7   ),GG ,BMASS   ,ZERO    ,W(1,11  ))     
      CALL IOVXXX(W(1,11  ),W(1,9   ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVIXXX(W(1,2   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL JIOXXX(W(1,1   ),W(1,9   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,13  ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,5   ),W(1,7   ),GG ,BMASS   ,ZERO    ,W(1,14  ))     
      CALL FVIXXX(W(1,1   ),W(1,10  ),GWF ,TMASS   ,TWIDTH  ,W(1,15  ))    
      CALL IOVXXX(W(1,15  ),W(1,14  ),W(1,8   ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,6   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,2   ),W(1,16  ),W(1,13  ),GWF ,AMP(4   ))            
C EL: set top width to zero in non-decay parts of diagrams
c      CALL FVOXXX(W(1,9   ),W(1,7   ),GG ,TMASS   ,TWIDTH  ,W(1,17  ))     
      CALL FVOXXX(W(1,9   ),W(1,7   ),GG ,TMASS   ,ZERO  ,W(1,17  ))     
      CALL IOVXXX(W(1,1   ),W(1,17  ),W(1,10  ),GWF ,AMP(5   ))            
C EL: eliminate the contribution of diagram #3, in which according to
C EL: matrix.ps the gluon is attached to the b coming from top decay
c     JAMP(   1) = -AMP(   1)-AMP(   3)-AMP(   5)
      JAMP(   1) = -AMP(   1)-AMP(   5)
      JAMP(   2) = -AMP(   2)-AMP(   4)
      MATBU_TDG = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATBU_TDG =MATBU_TDG+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
C      Do I = 1, NGRAPHS
C          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
C      Enddo
C      Do I = 1, NCOLOR
C          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
C      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END


C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE BDB_TUBG(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : b d~ -> e+ ve b u~ g  
C  
C Crossing   1 is b d~ -> e+ ve b u~ g  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATBDB_TUBG
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
C      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
C      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
C      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO

C EL: comment out all instances of multi_channel              
C      IF (multi_channel) THEN
C          DO IHEL=1,NGRAPHS
C              amp2(ihel)=0d0
C              jamp2(ihel)=0d0
C          ENDDO
C          DO IHEL=1,int(jamp2(0))
C              jamp2(ihel)=0d0
C          ENDDO
C      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATBDB_TUBG(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATBDB_TUBG(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
C      IF (MULTI_CHANNEL) THEN
C          XTOT=0D0
C          DO IHEL=1,MAPCONFIG(0)
C              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C          ENDDO
C          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATBDB_TUBG(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : b d~ -> e+ ve b u~ g  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[1,5,7]T[6,2]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[1,5]T[6,2,7]                                             
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),BMASS ,NHEL(1   ),+1*IC(1   ),W(1,1   ))       
      CALL OXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),ZERO ,NHEL(6   ),-1*IC(6   ),W(1,6   ))        
      CALL VXXXXX(P(0,7   ),ZERO ,NHEL(7   ),+1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,9   ))    
      CALL JIOXXX(W(1,6   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,1   ),W(1,7   ),GG ,BMASS   ,ZERO    ,W(1,11  ))     
      CALL IOVXXX(W(1,11  ),W(1,9   ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,2   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL JIOXXX(W(1,1   ),W(1,9   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,6   ),W(1,12  ),W(1,13  ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,5   ),W(1,7   ),GG ,BMASS   ,ZERO    ,W(1,14  ))     
      CALL FVIXXX(W(1,1   ),W(1,10  ),GWF ,TMASS   ,TWIDTH  ,W(1,15  ))    
      CALL IOVXXX(W(1,15  ),W(1,14  ),W(1,8   ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,6   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,16  ),W(1,2   ),W(1,13  ),GWF ,AMP(4   ))            
C EL: set top width to zero in non-decay parts of diagrams
cel      CALL FVOXXX(W(1,9   ),W(1,7   ),GG ,TMASS   ,TWIDTH  ,W(1,17  ))     
      CALL FVOXXX(W(1,9   ),W(1,7   ),GG ,TMASS   ,ZERO  ,W(1,17  ))     
      CALL IOVXXX(W(1,1   ),W(1,17  ),W(1,10  ),GWF ,AMP(5   ))            
C EL: matrix.ps the gluon is attached to the b coming from top decay
C      JAMP(   1) = +AMP(   1)+AMP(   3)+AMP(   5)
      JAMP(   1) = +AMP(   1)+AMP(   5)
      JAMP(   2) = +AMP(   2)+AMP(   4)
      MATBDB_TUBG = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATBDB_TUBG =MATBDB_TUBG+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
C      Do I = 1, NGRAPHS
C          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
C      Enddo
C      Do I = 1, NCOLOR
C          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
C      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END



C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE UG_TBBD_S(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u g -> e+ ve b b~ d  
C  
C Crossing   1 is u g -> e+ ve b b~ d  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATUG_TBBD_S
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
C EL: comment out all instances of multi_channel              
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATUG_TBBD_S(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATUG_TBBD_S(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATUG_TBBD_S(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u g -> e+ ve b b~ d  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[1,7]T[6,5,2]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[1,7,2]T[6,5]                                             
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),BMASS ,NHEL(6   ),-1*IC(6   ),W(1,6   ))       
      CALL OXXXXX(P(0,7   ),ZERO ,NHEL(7   ),+1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,9   ))     
      CALL JIOXXX(W(1,1   ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVOXXX(W(1,9   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,12  ))    
      CALL FVOXXX(W(1,12  ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,13  ))     
      CALL IOVXXX(W(1,6   ),W(1,13  ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,14  ))     
      CALL IOVXXX(W(1,14  ),W(1,12  ),W(1,10  ),GWF ,AMP(3   ))            
      CALL JIOXXX(W(1,6   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL FVOXXX(W(1,7   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,1   ),W(1,16  ),W(1,15  ),GWF ,AMP(4   ))            
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,17  ))     
      CALL IOVXXX(W(1,17  ),W(1,7   ),W(1,15  ),GWF ,AMP(5   ))            
C EL: eliminate the contribution of diagram #1, in which according to
C EL: matrix.ps the gluon is attached to the b coming from top decay
C EL: also eliminate the contribution from diagrams 2 and 3 as they 
c EL: belong to the t-channel.
c      JAMP(   1) = -AMP(   1)-AMP(   2)-AMP(   3)
      JAMP(   1) = (0d0,0d0)
      JAMP(   2) = -AMP(   4)-AMP(   5)
      MATUG_TBBD_S = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATUG_TBBD_S =MATUG_TBBD_S+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END



C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE UG_TBBD_T(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u g -> e+ ve b b~ d  
C  
C Crossing   1 is u g -> e+ ve b b~ d  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATUG_TBBD_T
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
C EL: comment out all instances of multi_channel              
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATUG_TBBD_T(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATUG_TBBD_T(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATUG_TBBD_T(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u g -> e+ ve b b~ d  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[1,7]T[6,5,2]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[1,7,2]T[6,5]                                             
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),BMASS ,NHEL(6   ),-1*IC(6   ),W(1,6   ))       
      CALL OXXXXX(P(0,7   ),ZERO ,NHEL(7   ),+1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,9   ))     
      CALL JIOXXX(W(1,1   ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVOXXX(W(1,9   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,12  ))    
      CALL FVOXXX(W(1,12  ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,13  ))     
      CALL IOVXXX(W(1,6   ),W(1,13  ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,14  ))     
      CALL IOVXXX(W(1,14  ),W(1,12  ),W(1,10  ),GWF ,AMP(3   ))            
      CALL JIOXXX(W(1,6   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL FVOXXX(W(1,7   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,1   ),W(1,16  ),W(1,15  ),GWF ,AMP(4   ))            
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,17  ))     
      CALL IOVXXX(W(1,17  ),W(1,7   ),W(1,15  ),GWF ,AMP(5   ))            
C EL: eliminate the contribution of diagram #1, in which according to
C EL: matrix.ps the gluon is attached to the b coming from top decay
C EL: also eliminate the contribution from diagrams 4 and 5 as they 
c EL: belong to the s-channel.
c      JAMP(   1) = -AMP(   1)-AMP(   2)-AMP(   3)
      JAMP(   1) = -AMP(   2)-AMP(   3)
c      JAMP(   2) =  -AMP(   4)-AMP(   5)
      JAMP(   2) = (0d0,0d0)
      MATUG_TBBD_T = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATUG_TBBD_T =MATUG_TBBD_T+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END


C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE DBG_TBBUB_S(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : d~ g -> e+ ve b b~ u~  
C  
C Crossing   1 is d~ g -> e+ ve b b~ u~  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATDBG_TBBUB_S
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
C EL: comment out all instances of multi_channel              
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATDBG_TBBUB_S(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATDBG_TBBUB_S(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATDBG_TBBUB_S(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : d~ g -> e+ ve b b~ u~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[6,5,2]T[7,1]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[6,5]T[7,1,2]                                             
C ----------
C BEGIN CODE
C ----------
      CALL OXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1*IC(1   ),W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),BMASS ,NHEL(6   ),-1*IC(6   ),W(1,6   ))       
      CALL IXXXXX(P(0,7   ),ZERO ,NHEL(7   ),-1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,9   ))     
      CALL JIOXXX(W(1,7   ),W(1,1   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVOXXX(W(1,9   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,12  ))    
      CALL FVOXXX(W(1,12  ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,13  ))     
      CALL IOVXXX(W(1,6   ),W(1,13  ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,14  ))     
      CALL IOVXXX(W(1,14  ),W(1,12  ),W(1,10  ),GWF ,AMP(3   ))            
      CALL JIOXXX(W(1,6   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL FVIXXX(W(1,7   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,16  ),W(1,1   ),W(1,15  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,17  ))     
      CALL IOVXXX(W(1,7   ),W(1,17  ),W(1,15  ),GWF ,AMP(5   ))            
C EL: eliminate the contribution of diagram #1, in which according to
C EL: matrix.ps the gluon is attached to the b coming from top decay
C EL: also eliminate the contribution from diagrams 2 and 3 as they 
c EL: belong to the t-channel.
c      JAMP(   1) = +AMP(   1)+AMP(   2)+AMP(   3)
      JAMP(   1) = (0d0,0d0)
      JAMP(   2) = +AMP(   4)+AMP(   5)
      MATDBG_TBBUB_S = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATDBG_TBBUB_S =MATDBG_TBBUB_S+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END

C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE DBG_TBBUB_T(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : d~ g -> e+ ve b b~ u~  
C  
C Crossing   1 is d~ g -> e+ ve b b~ u~  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATDBG_TBBUB_T
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
C      Double Precision amp2(maxamps), jamp2(0:maxamps)
C      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
C EL: comment out all instances of multi_channel              
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATDBG_TBBUB_T(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATDBG_TBBUB_T(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATDBG_TBBUB_T(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : d~ g -> e+ ve b b~ u~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[6,5,2]T[7,1]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[6,5]T[7,1,2]                                             
C ----------
C BEGIN CODE
C ----------
      CALL OXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1*IC(1   ),W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),BMASS ,NHEL(6   ),-1*IC(6   ),W(1,6   ))       
      CALL IXXXXX(P(0,7   ),ZERO ,NHEL(7   ),-1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,9   ))     
      CALL JIOXXX(W(1,7   ),W(1,1   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVOXXX(W(1,9   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,12  ))    
      CALL FVOXXX(W(1,12  ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,13  ))     
      CALL IOVXXX(W(1,6   ),W(1,13  ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,14  ))     
      CALL IOVXXX(W(1,14  ),W(1,12  ),W(1,10  ),GWF ,AMP(3   ))            
      CALL JIOXXX(W(1,6   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL FVIXXX(W(1,7   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,16  ),W(1,1   ),W(1,15  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,17  ))     
      CALL IOVXXX(W(1,7   ),W(1,17  ),W(1,15  ),GWF ,AMP(5   ))            
C EL: eliminate the contribution of diagram #1, in which according to
C EL: matrix.ps the gluon is attached to the b coming from top decay
C EL: also eliminate the contribution from diagrams 4 and 5 as they 
c EL: belong to the s-channel.
c      JAMP(   1) = +AMP(   1)+AMP(   2)+AMP(   3)
      JAMP(   1) =  AMP(   2)+AMP(   3)
c      JAMP(   2) = +AMP(   4)+AMP(   5)
      JAMP(   2) = (0d0,0d0)
      MATDBG_TBBUB_T = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATDBG_TBBUB_T =MATDBG_TBBUB_T+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END


C EL: The following routine is SMATRIX generated by MadEvent, suitably modified
      SUBROUTINE BG_TUBD(P1,ANS)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : b g -> e+ ve b u~ d  
C  
C Crossing   1 is b g -> e+ ve b u~ d  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      Include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB= 128, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 MATBG_TUBD
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
C EL: comment out all common blocks
c      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
C EL: comment out all common blocks
c      common/to_matrix/isum_hel, multi_channel
C EL: comment out all instances of mapconfig, used by multi_channel
c      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
c      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /    5/          
C EL: comment out all instances of amp2, used by multi_channel
c      DATA jamp2(0) /   2/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  65),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  66),IHEL=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  67),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  68),IHEL=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  69),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  70),IHEL=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  71),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  72),IHEL=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  73),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  74),IHEL=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  75),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  76),IHEL=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  77),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  78),IHEL=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  79),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  80),IHEL=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  81),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  82),IHEL=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  83),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  84),IHEL=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  85),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  86),IHEL=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  87),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  88),IHEL=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  89),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  90),IHEL=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  91),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  92),IHEL=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  93),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  94),IHEL=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  95),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  96),IHEL=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  97),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  98),IHEL=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  99),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 100),IHEL=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 101),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 102),IHEL=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 103),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 104),IHEL=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 105),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 106),IHEL=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 107),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 108),IHEL=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 109),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 110),IHEL=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 111),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 112),IHEL=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL, 113),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL, 114),IHEL=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL, 115),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL, 116),IHEL=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL, 117),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL, 118),IHEL=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL, 119),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL, 120),IHEL=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL, 121),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL, 122),IHEL=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL, 123),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL, 124),IHEL=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL, 125),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL, 126),IHEL=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL, 127),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL, 128),IHEL=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1,7) / 1, 2, 3, 4, 5, 6, 7/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO

C EL: comment out all instances of multi_channel                     
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=MATBG_TUBD(P ,NHEL(1,IHEL),JC(1))            
                 ANS(IPROC)=ANS(IPROC)+T
                  IF (T .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=MATBG_TUBD(P ,NHEL(1,IHEL),JC(1))            
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
C EL: comment out all instances of multi_channel       
c      IF (MULTI_CHANNEL) THEN
c          XTOT=0D0
c          DO IHEL=1,MAPCONFIG(0)
c              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
c          ENDDO
c          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION MATBG_TUBD(P,NHEL,IC)
C  
C Generated by MadGraph II Version 3.90. Updated 08/26/05               
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : b g -> e+ ve b u~ d  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   5,NEIGEN=  2) 
C EL: replace the following include with the explicit inclusion of
c nexternal.inc, originally included by genps.inc
C      include "genps.inc"
      integer    nexternal
      parameter (nexternal=  7)
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  19, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
C EL: comment out all instances of amp2, used by multi_channel
c      Double Precision amp2(maxamps), jamp2(0:maxamps)
c      common/to_amps/  amp2,       jamp2
C EL: The original coupl.inc has been renamed MEcoupl.inc
      include "MEcoupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    12,    0/                            
C               T[1,5,2]T[6,7]                                             
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /     0,   12/                            
C               T[1,5]T[6,7,2]                                             
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),BMASS ,NHEL(1   ),+1*IC(1   ),W(1,1   ))       
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1*IC(3   ),W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
      CALL OXXXXX(P(0,5   ),BMASS ,NHEL(5   ),+1*IC(5   ),W(1,5   ))       
      CALL IXXXXX(P(0,6   ),ZERO ,NHEL(6   ),-1*IC(6   ),W(1,6   ))        
      CALL OXXXXX(P(0,7   ),ZERO ,NHEL(7   ),+1*IC(7   ),W(1,7   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,9   ))     
      CALL JIOXXX(W(1,6   ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL FVOXXX(W(1,9   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,1   ),W(1,11  ),W(1,10  ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,TMASS   ,TWIDTH  ,W(1,12  ))    
      CALL FVOXXX(W(1,12  ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,13  ))     
      CALL IOVXXX(W(1,1   ),W(1,13  ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,7   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,14  ))     
      CALL JIOXXX(W(1,1   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL IOVXXX(W(1,6   ),W(1,14  ),W(1,15  ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL JIOXXX(W(1,16  ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,1   ),W(1,12  ),W(1,17  ),GWF ,AMP(4   ))            
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,18  ))     
      CALL JIOXXX(W(1,18  ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,7   ),W(1,19  ),GWF ,AMP(5   ))            
C EL: eliminate the contribution of diagram #1, in which according to
C EL: matrix.ps the gluon is attached to the b coming from top decay
C EL: also eliminate the contribution from diagrams 2 and 5 as they 
c EL: belong to W-decay
c      JAMP(   1) = +AMP(   1)+AMP(   2)+AMP(   5)
      JAMP(   1) = (0d0,0d0)
      JAMP(   2) = +AMP(   3)+AMP(   4)
      MATBG_TUBD = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          MATBG_TUBD =MATBG_TUBD+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
C EL: comment out all instances of amp2, used by multi_channel
c      Do I = 1, NGRAPHS
c          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
c      Enddo
c      Do I = 1, NCOLOR
c          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
c      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
c
c
c End of lepton matrix elements
c
c
